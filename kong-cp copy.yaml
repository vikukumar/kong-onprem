image:
  repository: kong/kong-gateway
  tag: "3.7"

secretVolumes:
  - kong-cluster-cert
  - kong-ca-cert
  - kong-enterprise-license

env:
  role: control_plane
  cluster_mtls: pki
  cluster_ca_cert: /etc/secrets/kong-ca-cert/ca.crt
  cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  nginx_http_ssl_protocols: TLSv1.2
  admin_gui_ssl_cert: /etc/secrets/kong-cluster-cert/tls.crt
  admin_gui_ssl_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  admin_ssl_cert: /etc/secrets/kong-cluster-cert/tls.crt
  admin_ssl_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  portal_gui_ssl_cert: /etc/secrets/kong-cluster-cert/tls.crt
  portal_gui_ssl_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  portal_api_ssl_cert: /etc/secrets/kong-cluster-cert/tls.crt
  portal_api_ssl_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  lua_ssl_verify_depth: 3
  admin_api_uri: http://admin.kong.local
  admin_gui_url: http://manager.kong.local
  portal_auth: basic-auth
  portal_api_url: http://portal-api.kong.local
  portal_gui_url: http://portal-dev.kong.local
  portal_gui_host: portal-dev.kong.local
  portal_gui_protocol: http
  log_level: debug
  lua_package_path: /opt/?.lua;;
  nginx_worker_processes: "2"
  database: postgres
  pg_host: kong-cp-postgresql
  pg_database: kong
  pg_user: kong
  pg_schema: kong
  pg_ssl: "off"
  pg_ssl_verify: "off"
  pg_password:
    valueFrom:
      secretKeyRef:
        name: kong-cp-postgresql
        key: password
  portal_session_conf:
    valueFrom:
      secretKeyRef:
        name: kong-session-config
        key: portal_session_conf
  user: kong
  password:
    valueFrom:
      secretKeyRef:
        name: kong-manager-password
        key: password
  smtp_mock: "on"
  license_path: ./license.json
  status_listen: 0.0.0.0:8100
  trusted_ips: 0.0.0.0/0,::/0
  vitals: false

admin:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: http
  labels: {}
  http:
    enabled: true
    servicePort: 80
    containerPort: 8001
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  tls:
    enabled: false
    parameters:
      - http2
  ingress:
    annotations:
      konghq.com/https-redirect-status-code: ""
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    enabled: true
    ingressClassName: kong-dev
    hostname: admin.kong.local
    path: /

manager:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: http
  labels: {}
  http:
    enabled: true
    servicePort: 80
    containerPort: 8002
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  tls:
    enabled: false
  ingress:
    annotations:
      konghq.com/https-redirect-status-code: ""
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    enabled: true
    ingressClassName: kong-dev
    hostname: manager.kong.local
    path: /

cluster:
  enabled: true
  type: LoadBalancer
  annotations: {}
  http:
    enabled: false
    #containerPort: 8005
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  tls:
    enabled: true
    servicePort: 443
    containerPort: 8005
  ingress:
    annotations:
      konghq.com/https-redirect-status-code: ""
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    enabled: true
    ingressClassName: kong-dev
    hostname: cp.kong.local
    path: /
    tls: kong-cluster-cert

clustertelemetry:
  enabled: true
  type: LoadBalancer
  http:
    enabled: false
  tls:
    enabled: true
    servicePort: 443
    containerPort: 8006
  ingress:
    annotations:
      konghq.com/https-redirect-status-code: ""
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    enabled: true
    ingressClassName: kong-dev
    hostname: tel.kong.local
    path: /
    tls: kong-cluster-cert

proxy:
  enabled: false

ingressController:
  enabled: true
  ingressClass: kong-dev
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  installCRDs: false
  env:
    publish_service: kong-dp/kong-dp-kong-proxy
    kong_admin_token:
      valueFrom:
        secretKeyRef:
          name: kong-manager-password
          key: password

enterprise:
  enabled: true
  license_secret: kong-enterprise-license # CHANGEME
  vitals:
    enabled: false
  rbac:
    enabled: true
    session_conf_secret: kong-session-config
    admin_api_auth: basic-auth
  portal:
    enabled: true
  smtp:
    enabled: false

portal:
  enabled: true
  type: ClusterIP
  annotations: 
    konghq.com/protocol: http
  labels: {}
  http:
    enabled: true
    servicePort: 80
    containerPort: 8003
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  tls:
    enabled: false
  ingress:
    annotations:
      konghq.com/https-redirect-status-code: ""
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    enabled: true
    ingressClassName: kong-dev
    hostname: portal-dev.kong.local
    path: /

portalapi:
  enabled: true
  type: ClusterIP
  annotations: 
    konghq.com/protocol: http
  labels: {}
  http:
    enabled: true
    servicePort: 80
    containerPort: 8004
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  tls:
    enabled: false
  ingress:
    annotations:
      konghq.com/https-redirect-status-code: ""
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    enabled: true
    ingressClassName: kong-dev
    hostname: portal-api.kong.local
    path: /

postgresql:
  enabled: true
  auth:
    database: kong
    username: kong
    existingSecret: kong-cp-postgresql
    secretKeys:
      adminPasswordKey: password
